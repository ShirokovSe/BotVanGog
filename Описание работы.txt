Отчет о работе.

Пернос стиля:
Основной функционал бота согласно технического задания. В процессе работы использовал многие подходы для переноса стиля, начиная с первоначального, представленного в статье
Гатиса в 2015 году, качество полуается отличным, но проблем в том, что возможно применять только один стиль, что не подошло под решаемую задачу,
поэтому появилась необходимость найти алгоритм, позволяющий ускорить процесс переноса стиля, а также сделать выбор стиля произваольным, было два: метод Чена и Шмидта и 
Хуанга и Белонги. Окончательный выбор был сделан в сторону Хуанга и Белонги, их идея с применением адитивной поканальной нормализации показалась мне интерсной, также
в статье, https://arxiv.org/pdf/1703.06868.pdf,  приведены сравнения, которые показывают, что данный метод работает наилучшим образом в отношении скорость/качество.
В коде была реализована идея, представленная в статье, за исключенеим: был выбран больший шаг обучения, картинки в датасете были отнормированы.
В результате получены ожидаемые результаты. Скорость выполнения на CPU  в среднем 7-8 секунд, что не может сравниться с вышеприведенными подхдами. 
В вопросах качества работы есть недочеты, не для каждого изображения стиля (особенно со слабовыделяющимся стилем) делает корректный перенос стиля, однако, данный недочет
полностью компенсируется скоростью работы, что является важным фактором при работе онлайн приложения.

Классификация:
Датасеты для классификации были собраны непосредственно для этой задачи (код представлен в файле Data Mining). Решалась задача многоклассовой классификации. В процессе 
работы были апробированы следующий подходы: написание собственной сети, импортирование известных архитектур (необученных), импортирование известных архитектур, обученных на
датасете ImageNet. Наилучшие результаты были получены с применением 3-го подхода. Для классификации зданий на 5 классов (Модерн, Классицизм, Барроко, Готика, Жилые дома) на
метрике accuracy был получен результат 84% на валидации, архитекура ResNet50. Считаю для данной задачи с учетом кастомного датасета данная цифра является хорошим показателем. 
Для датасета с картина для классификации на 10 классов (Классицизм, Кубизм, Экспрессионизм, Импрессионизм, Маринизм, Модерн, Реализм, Романтизм, Сюрреализм) на метрике accuracy
был получен результат 75%, архитектура Efficientb7(млашие архитектуры давали результат хужу).Показатель невысокий, но и задача нетривиальная, порой, и человек не может верно 
определить стиль картины, поэтому считаю данный показатель корректным.

Генерация:
В качестве дополнительной части реализована генерация картин разных стилей по запросу. Для решения задачи использовался conditional deep convolutional GAN. Размер картинок небольшой (64 на 64),
поэтому для корректного отображения пришлось прибегнуть к коллажу из 9 картин сразу при отправке пользователю. К сожалению, обучить GAN на картинках большего размера не получилось из-за
технического ограничения. Весь датасет не влезал в оперативную память, а учить без добавления в оперативную память было крайне долго (попытки были, но безуспешно, даже ColabPRO не позволяет так
долго учить). Полученный результаты считаю адекватными, так как GAN генерирует картинки по запросу безошибочно, стиль всех картин угадывается. Конечно, из-за низкого разрешения, качество
деталей является неудовлетворительынм.

Бот:
Бот написан с использвланием библиотеки aiogram. Размещен на выделенном сервере AWS, для корректной рабоыт webhook пришлось поднимать nginx сервер. В остальном, специфики нет, все в коде.
